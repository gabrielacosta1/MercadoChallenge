package com.mercado_challenge.MercadoAdventure.domain.model;

import java.util.List;

import com.mercado_challenge.MercadoAdventure.application.port.in.command.ProductCreationCommand;
import com.mercado_challenge.MercadoAdventure.application.port.in.command.ProductUpdateCommand;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class Product {
    private String productId;
    private String name;
    private String description;
    private Double price;
    private int stock;
    private String userId;
    private String categoryId;
    private List<Review> reviews;

    public static Product createFromCommand(ProductCreationCommand command) {
        return new Product(
 null, // productId will be generated by the persistence layer
            command.getName(),
            command.getDescription(),
            command.getPrice(),
            command.getStock(),
            command.getUserId(),
            command.getCategoryId(),
 null // reviews will be empty initially
        );
    }

    public void updatedProductFromCommand(ProductUpdateCommand productUpdateCommand){
        if (productUpdateCommand.getPrice() != null && productUpdateCommand.getPrice() <= 0){
            throw new IllegalArgumentException("El precio debe ser mayor a cero");
        }

        if (productUpdateCommand.getName() != null && !productUpdateCommand.getName().isEmpty()){
            this.name = productUpdateCommand.getName();
        }
        if (productUpdateCommand.getDescription() != null && !productUpdateCommand.getDescription().isEmpty()){
            this.description = productUpdateCommand.getDescription();
        }
        if (productUpdateCommand.getPrice() != null){
            this.price = productUpdateCommand.getPrice();
        }
        if (productUpdateCommand.getStock() != null){
            this.stock = productUpdateCommand.getStock();
        }
        if (productUpdateCommand.getCategoryId() != null && !productUpdateCommand.getCategoryId().isEmpty()){
            this.categoryId = productUpdateCommand.getCategoryId();
        }
    }
}
